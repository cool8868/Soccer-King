<Window
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:BatchTools="clr-namespace:Games.NB.Match.Emulator.WPF.Controls" x:Class="Games.NB.Match.Emulator.WPF.Main"
    Title="比赛模拟器" Height="680" Width="1235" Loaded="Window_Loaded" Icon="Resources\icon.jpg" Closed="Window_Closed" WindowStartupLocation="CenterScreen" mc:Ignorable="d" ResizeMode="CanMinimize" WindowStyle="SingleBorderWindow">
    <Window.Resources>
        <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE"/>
        <!-- Disabled Brushes are used for the Disabled look of each control -->
        <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888"/>

        <SolidColorBrush x:Key="SolidBorderBrush" Color="#888"/>
        <!-- Used for background of ScrollViewer, TreeView, ListBox, Expander, TextBox, Tab Control -->
        <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF"/>

        <!-- NormalBrush is used as the Background for SimpleButton, SimpleRepeatButton -->
        <LinearGradientBrush x:Key="NormalBrush" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#EEE" Offset="0.0"/>
            <GradientStop Color="#CCC" Offset="1.0"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="NormalBorderBrush" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#CCC" Offset="0.0"/>
            <GradientStop Color="#444" Offset="1.0"/>
        </LinearGradientBrush>

        <!-- DefaultedBorderBrush is used to show KeyBoardFocus -->
        <LinearGradientBrush x:Key="DefaultedBorderBrush" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#777" Offset="0.0"/>
            <GradientStop Color="#000" Offset="1.0"/>
        </LinearGradientBrush>

        <!-- MouseOverBrush is used for MouseOver in Button, Radio Button, CheckBox -->
        <LinearGradientBrush x:Key="MouseOverBrush" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#FFF" Offset="0.0"/>
            <GradientStop Color="#AAA" Offset="1.0"/>
        </LinearGradientBrush>

        <!-- PressedBrush is used for Pressed in Button, Radio Button, CheckBox -->
        <LinearGradientBrush x:Key="PressedBrush" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#BBB" Offset="0.0"/>
            <GradientStop Color="#EEE" Offset="0.1"/>
            <GradientStop Color="#EEE" Offset="0.9"/>
            <GradientStop Color="#FFF" Offset="1.0"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="PressedBorderBrush" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#444" Offset="0.0"/>
            <GradientStop Color="#888" Offset="1.0"/>
        </LinearGradientBrush>

        <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA"/>

        <!-- Simple Repeat Button - This is used by Simple ScrollBar for the up and down buttons -->
        <Style x:Key="SimpleRepeatButton" d:IsControlPart="True" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
            <Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Grid>
                            <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                            <ContentPresenter HorizontalAlignment="Center" x:Name="ContentPresenter" VerticalAlignment="Center" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsKeyboardFocused" Value="true">
                                <Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" Value="{DynamicResource MouseOverBrush}" TargetName="Border"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Simple ScrollRepeatButton Style - This RepeatButton is used above and below the Thumb in the Scrollbar. They are set to transparent si that they do not show over the scrollbar -->
        <Style x:Key="SimpleScrollRepeatButtonStyle" d:IsControlPart="True" TargetType="{x:Type RepeatButton}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Grid>
                            <Rectangle Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Simple Thumb - The Thumb is the draggable part of the Scrollbar -->
        <Style x:Key="SimpleThumbStyle" d:IsControlPart="True" TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Grid Margin="0,0,0,0" x:Name="Grid">
                            <Rectangle HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="2" RadiusY="2" Fill="{DynamicResource NormalBrush}" Stroke="{DynamicResource NormalBorderBrush}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsFocused" Value="True"/>
                            <Trigger Property="IsMouseOver" Value="True"/>
                            <Trigger Property="IsEnabled" Value="False"/>
                            <Trigger Property="IsDragging" Value="True"/>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Simple ScrollBar  This makes use of SimpleThumb, SimpleRepeatButton and SimpleScrollRepeatButton -->

        <Style x:Key="SimpleScrollBar" TargetType="{x:Type ScrollBar}">
            <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                        <Grid x:Name="GridRoot" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Background="{TemplateBinding Background}">
                            <Grid.RowDefinitions>
                                <RowDefinition MaxHeight="18"/>
                                <RowDefinition Height="0.00001*"/>
                                <RowDefinition MaxHeight="18"/>
                            </Grid.RowDefinitions>

                            <RepeatButton x:Name="DecreaseRepeat" Style="{DynamicResource SimpleRepeatButton}" Command="ScrollBar.LineUpCommand">
                                <Grid>
                                    <Path x:Name="DecreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 0 4 L 8 4 L 4 0 Z"/>
                                </Grid>
                            </RepeatButton>

                            <!-- Track is a special layout container which sizes the thumb and the repeat button which do jump scrolling either side of it -->
                            <Track Grid.Row="1" x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="true">
                                <Track.Thumb>
                                    <Thumb Style="{DynamicResource SimpleThumbStyle}"/>
                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton x:Name="PageUp" Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="ScrollBar.PageDownCommand"/>
                                </Track.IncreaseRepeatButton>
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton x:Name="PageDown" Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="ScrollBar.PageUpCommand"/>
                                </Track.DecreaseRepeatButton>
                            </Track>

                            <RepeatButton Grid.Row="2" x:Name="IncreaseRepeat" Style="{DynamicResource SimpleRepeatButton}" Command="ScrollBar.LineDownCommand">
                                <Grid>
                                    <Path x:Name="IncreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 0 0 L 4 4 L 8 0 Z"/>
                                </Grid>
                            </RepeatButton>
                        </Grid>

                        <!-- This uses a single template for ScrollBar and rotate it to be Horizontal
					It also changes the commands so that the it does Left and Right instead of Up and Down Commands -->
                        <ControlTemplate.Triggers>
                            <Trigger Property="Orientation" Value="Horizontal">

                                <!-- Rotate the ScrollBar from Vertical to Horizontal -->
                                <Setter Property="LayoutTransform" TargetName="GridRoot">
                                    <Setter.Value>
                                        <RotateTransform Angle="-90"/>
                                    </Setter.Value>
                                </Setter>

                                <!-- Track is bound to Orientation internally, so we need to rotate it back to Vertical -->
                                <Setter TargetName="PART_Track" Property="Orientation" Value="Vertical"/>

                                <!-- Change the commands to do Horizontal commands -->
                                <Setter Property="Command" Value="ScrollBar.LineLeftCommand" TargetName="DecreaseRepeat"/>
                                <Setter Property="Command" Value="ScrollBar.LineRightCommand" TargetName="IncreaseRepeat"/>
                                <Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageDown"/>
                                <Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageUp"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Simple ScrollViewer 
	ScrollViewer is a Grid control which has a ContentPresenter and a Horizontal and Vertical ScrollBar 
	It is used by ListBox, MenuItem, ComboBox, and TreeView -->
        <Style x:Key="SimpleScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                        <Grid Background="{TemplateBinding Background}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <ScrollContentPresenter Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}"/>

                            <!-- The visibility of the ScrollBars is controlled by the implementation fo the control -->
                            <ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" x:Name="PART_HorizontalScrollBar" Style="{DynamicResource SimpleScrollBar}" Orientation="Horizontal" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" />
                            <ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" x:Name="PART_VerticalScrollBar" Style="{DynamicResource SimpleScrollBar}" Orientation="Vertical" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Simple TextBox -->
        <Style x:Key="SimpleTextBox" TargetType="{x:Type TextBox}">
            <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="AllowDrop" Value="true"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Grid>
                            <Border x:Name="Border" Background="{DynamicResource WindowBackgroundBrush}" BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1" Padding="2" CornerRadius="2">

                                <!-- The implementation places the Content into the ScrollViewer. It must be named PART_ContentHost for the control to function -->
                                <ScrollViewer Margin="0" x:Name="PART_ContentHost" Style="{DynamicResource SimpleScrollViewer}" Background="{TemplateBinding Background}"/>

                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
                                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </Window.Resources>
    <Canvas Background="{DynamicResource {x:Static SystemColors.GradientActiveCaptionBrushKey}}" Height="655" VerticalAlignment="Top">
        <BatchTools:MenuControl Canvas.Top="0" Width="1229" CurName="Emulator"/>
        
        <Canvas x:Name="pitchCanvas" Margin="0" HorizontalAlignment="Left" VerticalAlignment="Top" Width="840" Height="544" Background="White" Canvas.Left="39" Canvas.Top="30">
            <Rectangle Stroke="#FFF80606" Width="840" Height="544">
                <Rectangle.Fill>
                    <SolidColorBrush/>
                </Rectangle.Fill>
            </Rectangle>
            <Path Stretch="Fill" Stroke="Black" Width="1" Height="544" Canvas.Left="420" Data="M411,0 L411,536.0084" StrokeThickness="5">
                <Path.Fill>
                    <SolidColorBrush/>
                </Path.Fill>
            </Path>
            <Rectangle x:Name="homeGoal" Stroke="Black" Width="132" Height="320" Canvas.Left="0" Canvas.Top="112" Visibility="Hidden">
                <Rectangle.Fill>
                    <SolidColorBrush/>
                </Rectangle.Fill>
            </Rectangle>
            <Rectangle Stroke="Black" Width="132" Height="320" Canvas.Left="708" Canvas.Top="112" Visibility="Hidden">
                <Rectangle.Fill>
                    <SolidColorBrush/>
                </Rectangle.Fill>
            </Rectangle>
            <Ellipse Stroke="Black" Width="179" Height="172" Canvas.Left="331" Canvas.Top="187" Visibility="Hidden">
                <Ellipse.Fill>
                    <SolidColorBrush/>
                </Ellipse.Fill>
            </Ellipse>
            <Rectangle Stroke="Black" Width="39" Height="64" Canvas.Left="-39" Canvas.Top="240" RenderTransformOrigin="0.5,0.5">
                <Rectangle.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform ScaleX="-1"/>
                        <SkewTransform/>
                        <RotateTransform/>
                        <TranslateTransform/>
                    </TransformGroup>
                </Rectangle.RenderTransform>
                <Rectangle.Fill>
                    <SolidColorBrush/>
                </Rectangle.Fill>
            </Rectangle>
            <Rectangle Stroke="Black" Width="33" Height="64" RenderTransformOrigin="0.5,0.5" Canvas.Left="840" Canvas.Top="240">
                <Rectangle.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform ScaleX="-1"/>
                        <SkewTransform/>
                        <RotateTransform/>
                        <TranslateTransform/>
                    </TransformGroup>
                </Rectangle.RenderTransform>
                <Rectangle.Fill>
                    <SolidColorBrush/>
                </Rectangle.Fill>
            </Rectangle>
            <Label Canvas.Left="792" Canvas.Top="6" Height="35" Name="lblSoccer" Width="32" FontSize="16">0:0</Label>
            <Label Name="lblManagerName" FontWeight="Bold" FontSize="72" HorizontalAlignment="Center" VerticalAlignment="Center" Canvas.Left="319" Canvas.Top="234" />
            <Label x:Name="lblRound" Canvas.Left="14" Canvas.Top="13" Content="0" Height="28" />
            <Label x:Name="lblInterruption" Canvas.Left="401" Canvas.Top="6" Content="Label" Height="28" />
        </Canvas>
        <Canvas Width="1229" Height="81" Canvas.Top="574" Background="{DynamicResource {x:Static SystemColors.GradientActiveCaptionBrushKey}}">
            <Button HorizontalAlignment="Left" x:Name="btnNewGame" Width="75" Click="btn_NewGame_Click" Content="新建" VerticalAlignment="Bottom" Height="23" Canvas.Left="413" Canvas.Top="7"/>
            <Button x:Name="btnStart" Click="btn_Start_Click" Content="播放" Width="75" HorizontalAlignment="Left" VerticalAlignment="Bottom" Height="23" Canvas.Left="493" Canvas.Top="6"/>
            <Button x:Name="btnNewStep" Content="暂停" Width="75" VerticalAlignment="Bottom" Height="23" Click="btnNewStep_Click" HorizontalAlignment="Left" Canvas.Left="573" Canvas.Top="39" />
            <Button x:Name="btnStartStep" Content="开始单步" Width="75" VerticalAlignment="Bottom" Height="23" Click="btnStartStep_Click"  HorizontalAlignment="Left" Canvas.Left="573" Canvas.Top="6" />
            <TextBox x:Name="txtTime" Width="51" Height="22" Canvas.Left="69" Canvas.Top="39" Text="120" TextWrapping="Wrap"/>
            <Label Canvas.Top="37" Content="比赛时长："/>
            <Label Canvas.Top="37" Canvas.Left="120" Content="秒"/>
            <CheckBox Height="16" HorizontalAlignment="Right" x:Name="chk_Zip" VerticalAlignment="Bottom" Width="75" IsChecked="True" Content="开启压缩" Canvas.Left="1148" Canvas.Top="10"/>
            <Button Width="75" Height="24" Content="保存" Canvas.Left="671" Canvas.Top="38" Click="SaveButton_Click" RenderTransformOrigin="-5.359,-0.583" />
            <Button x:Name="btnLoad" Width="75" Content="读取" Canvas.Left="671" Canvas.Top="7" Click="btnLoad_Click" />
            <Label Canvas.Left="194" Canvas.Top="37" Content="跳转回合：" Height="28" Name="label1" />
            <TextBox x:Name="txtRound" Canvas.Left="264" Canvas.Top="39" Height="23" Width="51" Text="0" />
            <Button Canvas.Left="320" Canvas.Top="39" Content="跳转" Height="23" Name="btnJump" Width="64" Click="btnJump_Click" />
            <Label Content="主队账号：" Canvas.Left="0" Canvas.Top="6"/>
            <BatchTools:ManagerIdControl x:Name="miControl1" Canvas.Top="6" Canvas.Left="69"/>
            <Label Content="客队账号：" Canvas.Left="194" Canvas.Top="6"/>
            <BatchTools:ManagerIdControl x:Name="miControl2" Canvas.Top="6" Canvas.Left="264"/>
            
            <Button Canvas.Left="413" Canvas.Top="39" Content="减速" Height="23" x:Name="btnLowSpeed" Width="75" Click="btnLowSpeed_Click"/>
            <Button Canvas.Left="493" Canvas.Top="39" Content="加速" Height="23" x:Name="btnAddSpeed" Width="75" Click="btnAddSpeed_Click"/>
            <CheckBox Height="16" HorizontalAlignment="Right" x:Name="chk_ShowState" VerticalAlignment="Bottom" Width="75" IsChecked="True" Click="chk_ShowState_Checked" Content="显示状态" Canvas.Left="908" Canvas.Top="10" />
            <CheckBox Height="16" HorizontalAlignment="Right" x:Name="chk_ShowPosition" VerticalAlignment="Bottom" Width="75" IsChecked="True" Click="chk_ShowState_Checked" Content="显示位置" Canvas.Left="988" Canvas.Top="10" />
            <CheckBox Height="16" HorizontalAlignment="Right" x:Name="chk_ShowName" VerticalAlignment="Bottom" Width="75" IsChecked="False" Click="chk_ShowState_Checked" Content="显示名字" Canvas.Left="1068" Canvas.Top="10" />
            <TextBox x:Name="txtMatchId" Width="190" Height="22" Canvas.Left="885" Canvas.Top="39" TextWrapping="Wrap"  Style="{DynamicResource SimpleTextBox}"/>
            <Label Canvas.Left="864" Canvas.Top="37" Content="id" Height="28" x:Name="label1_Copy" />
            <Button x:Name="btnLoadFromDB" Width="44" Content="读取" Canvas.Left="1169" Canvas.Top="39" Click="btnLoadFromDB_Click"/>
            <ComboBox x:Name="cmbMatchType" Canvas.Left="1080" Canvas.Top="39" Width="84" />
            <Button x:Name="btnViewStatistics" Width="75" Content="显示统计" Canvas.Left="772" Canvas.Top="39" Click="btnViewStatistics_Click"/>
            <CheckBox Height="16" HorizontalAlignment="Right" x:Name="chk_Statistics" VerticalAlignment="Bottom" Width="75" IsChecked="False" Content="开启统计" Canvas.Left="772" Canvas.Top="10" />
        </Canvas>
        <DataGrid x:Name="DataGridSkill" CanUserAddRows="False"  AutoGenerateColumns="False"  Height="544" Canvas.Left="920" Canvas.Top="30" Width="290">
            <DataGrid.Columns>
                <DataGridTextColumn Header="回合" Binding="{Binding Round, Mode=OneWay}" Width="50"/>
                <DataGridTextColumn Header="名称" Binding="{Binding Name, Mode=OneWay}" />
                <DataGridTextColumn Header="释放者" Binding="{Binding Source, Mode=OneWay}" />
                <DataGridTextColumn Header="目标" Binding="{Binding Target, Mode=OneWay}" />
                <DataGridTextColumn Header="id" Binding="{Binding Id, Mode=OneWay}" />
                <DataGridTextColumn Header="type" Binding="{Binding Type, Mode=OneWay}" />
            </DataGrid.Columns>
        </DataGrid>
    </Canvas>
</Window>
